TITLE:: BufFiles
summary:: Load folder of sound files to buffers in an array
categories:: Buffer
related:: Classes/BufFolders

DESCRIPTION::
An easy way to load a bunch of audio files into easily accessible collections of buffers in Supercollider. Great for sample libraries.
This class loads the sound files at the root of a folder into the array, ignoring any subfolders

Supported file types: aiff, wav, wave, riff, sun, next, sd2, ircam, raw, mat4, mat5, paf, svx, nist, voc, w64, pvf, xi, htk, sds, avr, flac, caf, upper and lowercase versions are supported. It will automatically skip all files that are illegal formats.

If the server is not booted, it will wait for hte server to boot before loading the files.

CLASSMETHODS::

METHOD:: new

ARGUMENT:: server
( Server to load the buffers to)

ARGUMENT:: path
Path to folder of sound files to load (string)

ARGUMENT::channel
Only load this channel if set to something (the loader will then internally use Buffer.readChannel in stead of Buffer.read).

ARGUMENT::normalize
Set true, all buffers will be normalized.

ARGUMENT::actionWhenDone
a Function that will called when the class is done loading.

ARGUMENT::verbose
Boolean.

INSTANCEMETHODS::

METHOD::findAll
Search this collection of buffers and find all buffers that that contain the
string in their filename (without extension).

code::

// A folder containing a bunch of samples
b = BufFiles.new(s, "~/Desktop/crazysounds");

// Only the files that contain the word "hihat"
c = b.findAll("hihat");

::

ARGUMENT::fileNamesThatContainString
A string that will be used for fuzzy finding. It is used in a .matchRegexp so it
can contain regular expression stuff.

METHOD::gui

Open up a gui for this object.
The gui allows one to preview sound files and make selections of the buffers contained in this object. A selection action may be registered for custom actions when the user makes a selection.

code::
(
// Simple example, opens gui after load
b = BufFiles.new(s, "~/frokost", actionWhenDone: {
    defer{ b.gui }
})

)

// Open up gui and preview files at any time:
b.gui;

// This contains all the selected buffers:
b.selected;

/* -------------------------------------------------------------------*/
// More advanced example: Play pattern using only selected buffers
(
// Set a custom selection action and do something with the buffers
b.selectionAction_({|selectedBuffers|
    Pdefn(\polySelected, Pseq(selectedBuffers, inf))
});

// SynthDef
SynthDef(\polybuf_sampler,{|out=0, amp=0.5, buffer, rate=1|
    var sig = PlayBuf.ar(numChannels:2, bufnum:buffer, rate:rate * BufRateScale.kr(buffer), trigger:1.0, startPos:0.0, loop:0.0, doneAction:2);
    Out.ar(out, sig)
}).add
)
// Play pattern using selection. Try updating the selection in the gui and hear what happens
(
Pbind(
    \instrument, \polybuf_sampler,
    \rate, Pwhite(0.5,1.0),
    \buffer, Pdefn(\polySelected, Pseq(b.selected, inf)),
    \dur, Pfunc{|ev| ev[\buffer].duration * ev[\rate].abs.reciprocal }
).play;
)
::

EXAMPLES::

code::

b = BufFolders(s, "path/to/808/sample/pack");

b[\808bd]; // A list of all 808 kick drums in the 808bd folder in the supplied path
b[\808hh]; // A list of all 808 high hats in the 808hh folder in the supplied path

b[\root]; // Contains all of the audio files at the root level (ie outside of the directories at path)

c = BufFiles(s, "path/to/808/sample/pack/808sd");

c.buffers; // Now this is just an array of files from the 808sd folder above

// Play using a pbind
Pbind(
    \instrument, \bufferPlayer, // (you need to make a bufferPlayer synth to make this work
	\buffer, Pseq([
		b[\808bd].asPxrand(1),
		c.asPseq(1)
	],inf), // Randomly choose from the kick drum samples
    \dur, Pseq([0.25, 0.5, 0.25, 0.125, 0.125],inf) // A terrible rhythm
).play;

::
